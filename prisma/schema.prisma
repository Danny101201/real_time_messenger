// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["metrics"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVelified  DateTime?
  image String?
  hashedPassword String?
  role Rule @default(USER)
  createdAt  DateTime @default(now())
  updatedAt  DateTime   @updatedAt

  conversationsIds String[] @db.ObjectId
  conversations Conversation[] @relation(fields: [conversationsIds],references: [id])

  seenMessageIds String[] @db.ObjectId
  seenMessage Message[] @relation("Seen",fields: [seenMessageIds],references: [id])

  accounts Account[]
  message Message[]

}



model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?
  providerType       String
  providerId         String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime   @updatedAt

  user User @relation(fields: [userId],references: [id],onDelete: Cascade)

}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}
model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String?
  image String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime   @updatedAt

  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId],references: [id],onDelete:Cascade)

  seenIds String[] @db.ObjectId
  seen User[] @relation("Seen",fields: [seenIds],references: [id])

  senderId String @db.ObjectId
  sender User @relation(fields: [senderId],references: [id], onDelete: Cascade)
}
model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name String?
  isGroup Boolean?

  messages Message[] 

  userIds String[] @db.ObjectId
  users User[] @relation(fields: [userIds],references: [id])
}


enum Rule {
  USER
  ADMIN
}